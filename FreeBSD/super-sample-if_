#!/usr/bin/env python2.7
#
# Mark Saad
# 5Jan17
# nonesuch@longcount.org
#
# A Supersampling if_ plugin for FreeBSD 
# 

import os
import sys
import re
import time
import cPickle as pickle
import subprocess as sp

try:
  input = sys.argv[1]
except:
  input = 0

FNULL = open(os.devnull, 'w')
nsq = {}

progname = os.path.basename(__file__)
INTERFACE = progname.split('_')
db = '/tmp/'+INTERFACE[1]+'-stats.db'

def touch(path):
    with open(path, 'a'):
        os.utime(path, None)

def getpoint():
     proc = sp.Popen('/usr/bin/netstat -ibn -I '+INTERFACE[1], shell=True, stdout=sp.PIPE, stderr=FNULL)
     output = proc.stdout.read() 
     linesplit  = re.split('\n', output)
     valsplit = re.split('Link[0-9].+', linesplit[1])
     data = valsplit[0].split( )
     nsq = {int(time.time()): [data[7],data[10]]}
     touch(db)
     nsqdump = open(db, 'rb+', os.O_RDWR|os.O_CREAT)
     while 1:
       try:
         nsq.update(pickle.load(nsqdump))
       except EOFError:
         nsqdump.close()
         break
     nsqdump = open(db, 'wb', os.O_RDWR|os.O_CREAT)
     pickle.dump(nsq, nsqdump)
     nsqdump.close()

def printdata():
    nsqdump = open(db, 'rb', os.O_RDWR|os.O_CREAT)
    while 1:
      try:
         nsq.update(pickle.load(nsqdump))
      except EOFError:
         nsqdump.close()
         break
    for entrytime,datapoint in nsq.iteritems():
        print '{0} {1}{2}{3}'.format("rbytes.value",entrytime,':',datapoint[0]) 
        print '{0} {1}{2}{3}'.format("obytes.value",entrytime,':',datapoint[1]) 


if input == "autoconf":
   print "yes"
   sys.exit(0)

elif input == "config":
   print 'graph_title 30Sec SuperSample on '+INTERFACE[1]+' traffic'
   print 'graph_order rbytes obytes'
   print 'graph_args --base 1000'
   print 'graph_vlabel bits per ${graph_period} in (-) / out (+)'
   print 'graph_category network'
   print 'graph_info This graph shows the traffic of the '+ INTERFACE[1]+' network interface.'
   print 'rbytes.label received'
   print 'rbytes.type DERIVE'
   print 'rbytes.graph no'
   print 'update_rate 30'
   print 'rbytes.cdef rbytes,8,*'
   print 'rbytes.min 0'
   print 'obytes.label bps'
   print 'obytes.type DERIVE'
   print 'obytes.negative rbytes'
   print 'obytes.cdef obytes,8,*'
   print 'obytes.min 0'
   print 'obytes.info Traffic sent (+) and received (-) on the '+INTERFACE[1]+' network interface. '
   sys.exit(0)

else:
    while 1:
      if input == "spawn":
         nsqdump = open(db, 'wb+', os.O_RDWR|os.O_CREAT).close()
         getpoint()
         time.sleep(30)
      elif input == "fetch":
         printdata()
         nsqdump = open(db, 'wb+', os.O_RDWR|os.O_CREAT).close()
         break
      else:
         printdata()
         break
   

